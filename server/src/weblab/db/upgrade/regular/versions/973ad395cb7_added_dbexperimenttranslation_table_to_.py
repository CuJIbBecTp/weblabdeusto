"""Added DbExperimentTranslation table to the model

Revision ID: 973ad395cb7
Revises: 42bd0c8938f9
Create Date: 2016-10-26 12:14:17.109713

"""

# revision identifiers, used by Alembic.

revision = '973ad395cb7'
down_revision = '42bd0c8938f9'

import sqlalchemy as sa
from alembic import op
import sqlalchemy.sql as sql

metadata = sa.MetaData()

# Those are needed for sqlalchemy-sql-level updates. They do not describe the tables in full.

experiment_table = sa.Table('Experiment', metadata,
                            sa.Column('id', sa.Integer()),
                            sa.Column('name', sa.String(255))
                            )

experiment_translation_table = sa.Table('ExperimentTranslation', metadata,
                                        sa.Column('id', sa.Integer()),
                                        sa.Column('experiment_id', sa.Integer()),
                                        sa.Column('lang_code', sa.String(8)),
                                        sa.Column('public_name', sa.String(255))
                                        )


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table(u'ExperimentTranslation',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('experiment_id', sa.Integer(), nullable=False),
                    sa.Column('lang_code', sa.Unicode(length=8), nullable=False),
                    sa.Column('public_name', sa.Unicode(length=255), nullable=True),
                    sa.Column('public_description', sa.Unicode(length=3000), nullable=True),
                    sa.ForeignKeyConstraint(['experiment_id'], [u'Experiment.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(u'ix_ExperimentTranslation_experiment_id', u'ExperimentTranslation', ['experiment_id'],
                    unique=False)
    ### end Alembic commands ###

    # Add an english translation for all existing laboratories, for English (the default), with a public
    # name that is equal to the internal name.
    s = sql.select([experiment_table.c.id, experiment_table.c.name])
    results = op.get_bind().execute(s)
    for result in results:
        experiment_name = result[experiment_table.c.name]
        experiment_id = result[experiment_table.c.id]
        new_experiment_translation = experiment_translation_table.insert().values(lang_code='en',
                                                                             experiment_id=experiment_id,
                                                                             public_name=experiment_name)
        op.get_bind().execute(new_experiment_translation)


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(u'ix_ExperimentTranslation_experiment_id', table_name=u'ExperimentTranslation')
    op.drop_table(u'ExperimentTranslation')
    print("TABLE SUPPOSEDLY DROPPED")
    ### end Alembic commands ###
