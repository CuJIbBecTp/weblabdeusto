.. note::

   **THIS SECTION IS BEING WRITTEN (MARCH 2013)**

.. _performance:

Performance
===========

.. contents:: Table of Contents

Introduction
------------

This section focuses on explaining how to increase the performance of the system
by customizing it with the proper arguments.

Core servers
------------

Python has a `Global Interpreter Lock (GIL)
<http://en.wikipedia.org/wiki/Global_Interpreter_Lock>`_ that makes the
threading model not work as could be expected when coming from other programming
languages. Internally in Python, when a thread is being run, it executes a
number of instructions which can be configured and then it swaps the context and
other thread is executed. Whenever there is an IO (input/output) operation, or
some extension developed in C is called, the context will also be swapped. The
problem is that during the execution of the pure Python not-IO operations, the
GIL is locked, so no other operation can be executed in other processor.

Given the amount of IO in WebLab-Deusto (IO includes not only the requests from
the client and the requests to the particular laboratory, but also the database
and all the access to the Redis server), certain concurrence will often occur
even with a single process. However, in order to take advantage of the nowadays
common dual, quad or more core processors, it can be managed using multiple
copies of Python processes instead of relying on the Python threading model.

For this reason, WebLab-Deusto has been designed so it can scale and multiple
independent processes can be executed not only in different machines, but also
in the same machine to mitigate this effect. This way, having 4 processes
running WebLab-Deusto in a quad core machine will increase the throughput.

In the following drawing, the WebLab Bot (see :ref:`bot`), which is a
student simulator that tests different loads of highly concurrent users (i.e.
users clicking on the *Reserve* button at the very same time), measures times
using different numbers of processes (1 and 5) with different database backends
(MySQLdb and PyMySQL). This shows the reservation method:

.. image:: /_static/multiple_cores.png
   :width: 600 px
   :align: center

As it is shown, MySQL in general performs better once you increase the number of
concurrent students. There are two Python libraries for using MySQL, one in pure
Python (PyMySQL), and a native one, which requires you compiling the
code as explained in the section :ref:`native_libraries`. The native one works
faster than the pure Python version. 

.. note::
   
   TO BE WRITTEN. Add how to deploy multiple cores instead of a single one.


Scheduling backends
-------------------


Apache worker MPM
-----------------


Summary
-------

In this section, more complex deployments have been addressed. It uses extensively the ``weblab-admin.py`` script, and therefore, it does not explain how this is managed internally. So as to understand the files generated by this script, continue with the next section, :ref:`directory_hierarchy`.

